#!/bin/bash

#=================================================
# GENERIC START
#=================================================
# IMPORT GENERIC HELPERS
#=================================================

source _common.sh
source /usr/share/yunohost/helpers

#=================================================
# LOAD SETTINGS
#=================================================

app=$YNH_APP_INSTANCE_NAME

domain=$(ynh_app_setting_get $app domain)
path_url=$(ynh_app_setting_get $app path)
final_path=$(ynh_app_setting_get $app final_path)
language=$(ynh_app_setting_get $app language)
db_name=$(ynh_app_setting_get $app db_name)

#=================================================
# ENSURE DOWNWARD COMPATIBILITY
#=================================================

# Fix is_public as a boolean value
if [ "$is_public" = "Yes" ]; then
	ynh_app_setting_set $app is_public 1
	is_public=1
elif [ "$is_public" = "No" ]; then
	ynh_app_setting_set $app is_public 0
	is_public=0
fi

# If db_name doesn't exist, create it
if [ -z $db_name ]; then
	db_name=$(ynh_sanitize_dbid $app)
	ynh_app_setting_set $app db_name $db_name
fi

# If final_path doesn't exist, create it
if [ -z $final_path ]; then
	final_path=/var/www/$app
	ynh_app_setting_set $app final_path $final_path
fi

#=================================================
# GET THE CALDAV APP
#=================================================

agendav_app_check_installation() {
	echo $(yunohost app list --installed -f "$1" | grep "id:")
}

# Check whether Ba√Økal or Radicale is installed
baikal_install=$(agendav_app_check_installation "baikal")
radicale_install=$(agendav_app_check_installation "radicale")
if [ -n "$baikal_install" ]
then
    caldav_app=baikal
    caldav_baseurl="/cal.php/"
elif [ -n "$radicale_install" ]
then
    caldav_app=radicale
    caldav_baseurl=/
else
    ynh_die "Please install Baikal or Radicale before AgenDAV."
fi

#=================================================
# BACKUP BEFORE UPGRADE THEN ACTIVE TRAP
#=================================================

# Backup the current version of the app
ynh_backup_before_upgrade
ynh_clean_setup () {
	# restore it if the upgrade fails
	ynh_restore_upgradebackup
}
# Exit if an error occurs during the execution of the script
ynh_abort_if_errors

#=================================================
# CHECK THE PATH
#=================================================

# Normalize the URL path syntax
path_url=$(ynh_normalize_url_path $path_url)

#=================================================
# STANDARD UPGRADE STEPS
#=================================================
# DOWNLOAD, CHECK AND UNPACK SOURCE
#=================================================

ynh_setup_source "$final_path"

#=================================================
# NGINX CONFIGURATION
#=================================================

# Copy and set nginx configuration
ynh_add_nginx_config

#=================================================
# UPGRADE DEPENDENCIES
#=================================================

# Install dependencies
ynh_install_app_dependencies php-cli

#=================================================
# CREATE DEDICATED USER
#=================================================

# Create a dedicated user (if not existing)
ynh_system_user_create $app

#=================================================
# PHP-FPM CONFIGURATION
#================================================

# Create a dedicated php-fpm config
ynh_add_fpm_config

#=================================================
# SPECIFIC SETUP
#=================================================
# CREATE SETTINGS.PHP
#=================================================

# Generate random encryption key
encryptkey=$(ynh_app_setting_get $app encryptkey)

# Copy and set AgenDAV configuration
timezone=$(cat /etc/timezone)

caldav_domain=$(ynh_app_setting_get $caldav_app domain)
caldav_path=$(ynh_app_setting_get $caldav_app path)
caldav_url="https://${caldav_domain}${caldav_path%/}"

conf_path="${final_path}/web/config/settings.php"

ynh_backup_if_checksum_is_different "$conf_path"

cp ../conf/settings.php "$conf_path"

logdir=/var/log/$app

ynh_replace_string "__DBUSER__" "${db_name}"         "$conf_path"
db_pwd=$(ynh_app_setting_get $app mysqlpwd)
ynh_replace_string "__DBPASS__" "${db_pwd}"         "$conf_path"
ynh_replace_string "__DBNAME__" "${db_name}"         "$conf_path"
ynh_replace_string "__ENCRYPTKEY__" "${encryptkey}" "$conf_path"
ynh_replace_string "__LOGDIR__" "${logdir}"         "$conf_path"
ynh_replace_string "__TIMEZONE__" "$timezone"       "$conf_path"
ynh_replace_string "__LANGUAGE__" "${language}"     "$conf_path"
ynh_replace_string "__CALDAV_BASEURL__" "${caldav_url}${caldav_baseurl}" "$conf_path"
ynh_replace_string "__CALDAV_DOMAIN__" "${caldav_domain}"                "$conf_path"

#=================================================
# STORE THE CHECKSUM OF THE CONFIG FILE
#=================================================

ynh_store_file_checksum "$conf_path"

#=================================================
# RUN DATABASE MIGRATIONS (INCLUDES INITIALIZATION)
#=================================================

(
	cd $final_path
	php agendavcli migrations:migrate --no-interaction
)

#=================================================
# SETUP LOGROTATE
#=================================================

mkdir -p $logdir
chown -R $app: $logdir

# Use logrotate to manage application logfile(s)
ynh_use_logrotate --non-append

#=================================================
# GENERIC FINALIZATION
#=================================================
# SECURE FILES AND DIRECTORIES
#=================================================

chown -R root: $final_path

# Only agendav user should write here
chown -R $app ${final_path}/web/var/cache/{profiler,twig}

# The agendav user should read here, but does not need to write
# Other users should not be able to read as it stores passwords.
chown -R root:$app ${final_path}/web/config/
chmod -R 750 ${final_path}/web/config/

#=================================================
# RELOAD NGINX
#=================================================

# Reload services
systemctl reload nginx
